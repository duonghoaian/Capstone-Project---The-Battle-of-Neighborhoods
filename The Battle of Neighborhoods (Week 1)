{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Coursera Capstone Project\n",
    "## The Battle of Neighborhoods (Week 1)\n",
    "### Duong Hoai AN - Part 1 : Introduction and Data Sections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solving environment: done\n",
      "\n",
      "## Package Plan ##\n",
      "\n",
      "  environment location: /opt/conda/envs/Python36\n",
      "\n",
      "  added / updated specs: \n",
      "    - folium=0.5.0\n",
      "\n",
      "\n",
      "The following packages will be downloaded:\n",
      "\n",
      "    package                    |            build\n",
      "    ---------------------------|-----------------\n",
      "    ca-certificates-2019.6.16  |       hecc5488_0         145 KB  conda-forge\n",
      "    branca-0.3.1               |             py_0          25 KB  conda-forge\n",
      "    altair-3.2.0               |           py36_0         770 KB  conda-forge\n",
      "    vincent-0.4.4              |             py_1          28 KB  conda-forge\n",
      "    openssl-1.1.1c             |       h516909a_0         2.1 MB  conda-forge\n",
      "    certifi-2019.6.16          |           py36_1         149 KB  conda-forge\n",
      "    folium-0.5.0               |             py_0          45 KB  conda-forge\n",
      "    ------------------------------------------------------------\n",
      "                                           Total:         3.3 MB\n",
      "\n",
      "The following NEW packages will be INSTALLED:\n",
      "\n",
      "    altair:          3.2.0-py36_0      conda-forge\n",
      "    branca:          0.3.1-py_0        conda-forge\n",
      "    folium:          0.5.0-py_0        conda-forge\n",
      "    vincent:         0.4.4-py_1        conda-forge\n",
      "\n",
      "The following packages will be UPDATED:\n",
      "\n",
      "    ca-certificates: 2019.5.15-1                   --> 2019.6.16-hecc5488_0 conda-forge\n",
      "    certifi:         2019.6.16-py36_1              --> 2019.6.16-py36_1     conda-forge\n",
      "\n",
      "The following packages will be DOWNGRADED:\n",
      "\n",
      "    openssl:         1.1.1c-h7b6447c_1             --> 1.1.1c-h516909a_0    conda-forge\n",
      "\n",
      "\n",
      "Downloading and Extracting Packages\n",
      "ca-certificates-2019 | 145 KB    | ##################################### | 100% \n",
      "branca-0.3.1         | 25 KB     | ##################################### | 100% \n",
      "altair-3.2.0         | 770 KB    | ##################################### | 100% \n",
      "vincent-0.4.4        | 28 KB     | ##################################### | 100% \n",
      "openssl-1.1.1c       | 2.1 MB    | ##################################### | 100% \n",
      "certifi-2019.6.16    | 149 KB    | ##################################### | 100% \n",
      "folium-0.5.0         | 45 KB     | ##################################### | 100% \n",
      "Preparing transaction: done\n",
      "Verifying transaction: done\n",
      "Executing transaction: done\n",
      "Libraries imported.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # library to handle data in a vectorized manner\n",
    "import time\n",
    "import pandas as pd # library for data analsysis\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', None)\n",
    "\n",
    "import json # library to handle JSON files\n",
    "import requests # library to handle requests\n",
    "from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n",
    "\n",
    "from geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n",
    "!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\n",
    "import folium # map rendering library\n",
    "\n",
    "print('Libraries imported.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Coursera Capstone - REPORT CONTENT\n",
    "\n",
    "1.Introduction Section : ⁃ Discussion of the business problem and the interested audience in this project.\n",
    "\n",
    "2.Data Section:\n",
    "⁃ Description of the data that will be used to solve the problem and the sources.\n",
    "\n",
    "3.Methodology section ⁃ Discussion and description of exploratory data analysis carried out, any inferential statistical testing\n",
    "performed, and if any machine learnings were used establishing the strategy and purposes.\n",
    "\n",
    "4.Results section ⁃ Discussion of the results.\n",
    "\n",
    "5.Discussion section ⁃ Elaboration and discussion on any observations noted and any recommendations suggested based on the results.\n",
    "\n",
    "6.Conclusion section ⁃ Report Conclusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A description of the problem and a discussion of the background. (15 marks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Introduction Section :\n",
    "\n",
    "### Discussion of the business problem and the audience who would be interested in this project.\n",
    "\n",
    "### Description of the Problem and Background\n",
    "\n",
    "### Scenario:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I am a business analyst residing in Southbank Melbourne. I currently live within walking distance to Melbourne CBD and Flinders station and I enjoy many amenities and venues in the area, such as various international cuisine restaurants, cafes, shopping malls and entertainment. I currently work in a bank within walking distance to my home. However, I have been offered an opportunity to work for a leading consulting firm in  Manhattan, NY. They will leverage my BA skills and newly acquired data science to help their business analytics team. I am unsure about taking the role and would like to use this opportunity to dedicate my final coursera project into investigating advantages and disadvatanges of taking this offer.The key question is : How much do I need to spend in comparison to Melbourne to find an apartment with my girl friend which is as convenient and affordable as mine in Melbourne, considering the salary difference. I can use available real estate websites and Google but the idea is to use and apply myself the learned tools during the course. In order to make a comparison and evaluation of the rental options in Manhattan NY, I must set some basis, therefore the apartment in Manhattan must meet the following demands:\n",
    "\n",
    "* Apartment must be 2 or 3 bedrooms\n",
    "* Desired location is near a metro station in the Manhattan area and within  (1.5 km) radius or less than 30 minutes walking distance. \n",
    "* Price of rent not exceed $6,000 per month\n",
    "* Top amenities in the selected neighborhood shall be similar to current residence\n",
    "* Desirable to have venues such as coffee shops, Asian and Japanese/Korean Restaurants, gym and Grocery stores nearby.\n",
    "* As a reference, I have included a map of venues near current residence in Melbourne."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Business Problem:\n",
    "The challenge is to find a suitable apartment for rent in Manhattan NY that complies with the demands on location, price and venues. The data required to resolve this challenge is described in section 2 below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interested Audience\n",
    "I believe this is a relevant challenge with valid questions for anyone moving to other large city in the US, EU or Asia. The same methodology can be applied in accordance to demands as applicable. This case is also applicable for anyone interested in exploring starting or locating a new business in any city. Lastly, it can also serve as a good practical exercise to develop Data Science skills."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A description of the data and how it will be used to solve the problem. (15 marks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## 2. Data Section:\n",
    "\n",
    "### Description of the data and its sources that will be used to solve the problem\n",
    "\n",
    "### Description of the Data:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following data is required to answer the issues of the problem:\n",
    "\n",
    "* List of Boroughs and neighborhoods of Manhattan with their geodata (latitude and longitude)\n",
    "* List of Subway metro stations in Manhattan with their relative location\n",
    "* List of apartments for rent in Manhattan area with their addresses and price\n",
    "* Preferably, a list of apartments for rent with additional information, such as price, address, area, # of beds\n",
    "* Venues for each Manhattan neighborhoods ( that can be clustered)\n",
    "* Venues for subway metro stations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How the data will be used to solve the problem\n",
    "The data will be used as follows:\n",
    "\n",
    "* Use Foursquare and geopy data to map top 10 venues for all Manhattan neighborhoods and clustered in groups ( as per Course LAB)\n",
    "* Use foursquare and geopy data to map the location of subway metro stations , separately and on top of the above clustered map in order to be able to identify the venues and amenities near each metro station, or explore each subway location separately\n",
    "* Use Foursquare and geopy data to map the location of rental places, in some form, linked to the subway locations.\n",
    "* create a map that depicts, for instance, the average rental price per square ft, around a radious of (1.5 km) around each subway station - or a similar metric. I will be able to quickly point to the popups to know the relative price per subway area.\n",
    "* Addresses from rental locations will be converted to geodata( lat, long) using Geopy-distance and Nominatim.\n",
    "* Data will be searched in open data sources if available, from real estate sites if open to reading, libraries or other government agencies such as Metro New York MTA, etc.\n",
    "\n",
    "The procesing of these DATA will allow to answer the key questions to make a decision:\n",
    "\n",
    "* what is the cost of rent (per square ft) around a mile radius from each subway metro station?\n",
    "* what is the area of Manhattan with best rental pricing that meets criteria established?\n",
    "* What is the distance from work place ( Park Ave and 53 rd St) and the tentative future home?\n",
    "* What are the venues of the two best places to live? How the prices compare?\n",
    "* How venues distribute among Manhattan neighborhoods and around metro stations?\n",
    "* Are there tradeoffs between size and price and location?\n",
    "* Any other interesting statistical data findings of the real estate and overall data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reference of venues around current residence in Melbourne for comparison to Manhattan place\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:4: DeprecationWarning: Using Nominatim with the default \"geopy/1.18.1\" `user_agent` is strongly discouraged, as it violates Nominatim's ToS https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors. Please specify a custom `user_agent` with `Nominatim(user_agent=\"my-application\")` or by overriding the default `user_agent`: `geopy.geocoders.options.default_user_agent = \"my-application\"`. In geopy 2.0 this will become an exception.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The geograpical coordinate of Melbourne home are -37.8212898, 144.9644173.\n"
     ]
    }
   ],
   "source": [
    "# Riverside Quay Southbank (Riverside Quay) Southbank VIC 3006 Australia\n",
    "address = 'Riverside Quay, Southbank'\n",
    "\n",
    "geolocator = Nominatim()\n",
    "location = geolocator.geocode(address)\n",
    "latitude = location.latitude\n",
    "longitude = location.longitude\n",
    "print('The geograpical coordinate of Melbourne home are {}, {}.'.format(latitude, longitude))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighborhood_latitude=-37.8212898\n",
    "neighborhood_longitude=144.9644173"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your credentails:\n",
      "CLIENT_ID: CETGLD3C3BHQLWQYAVNIGTTHRNOCSMO3GDQ1KYN3V0RPQZVA\n",
      "CLIENT_SECRET:X5CYNQD03LMAYUQNXYVHWUSI3D24LHWL1MN12OVWN5HKJP3K\n"
     ]
    }
   ],
   "source": [
    "LIMIT = 100 # limit of number of venues returned by Foursquare API\n",
    "radius = 500 # define radius\n",
    "CLIENT_ID = 'CETGLD3C3BHQLWQYAVNIGTTHRNOCSMO3GDQ1KYN3V0RPQZVA' # My Foursquare ID\n",
    "CLIENT_SECRET = 'X5CYNQD03LMAYUQNXYVHWUSI3D24LHWL1MN12OVWN5HKJP3K' # My Foursquare Secret\n",
    "VERSION = '20180604'\n",
    "print('Your credentails:')\n",
    "print('CLIENT_ID: ' + CLIENT_ID)\n",
    "print('CLIENT_SECRET:' + CLIENT_SECRET)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://api.foursquare.com/v2/venues/explore?&client_id=CETGLD3C3BHQLWQYAVNIGTTHRNOCSMO3GDQ1KYN3V0RPQZVA&client_secret=X5CYNQD03LMAYUQNXYVHWUSI3D24LHWL1MN12OVWN5HKJP3K&v=20180604&ll=-37.8212898,144.9644173&radius=500&limit=100'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url= 'https://api.foursquare.com/v2/venues/explore?&client_id=CETGLD3C3BHQLWQYAVNIGTTHRNOCSMO3GDQ1KYN3V0RPQZVA&client_secret=X5CYNQD03LMAYUQNXYVHWUSI3D24LHWL1MN12OVWN5HKJP3K&v=20180604&ll=-37.8212898,144.9644173&radius=500&limit=100'\n",
    "url # display URL\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = requests.get(url).json()\n",
    "#results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Function that extracts the category of the venues near Southbank - borrow from the Foursquare lab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# function that extracts the category of the venue\n",
    "def get_category_type(row):\n",
    "    try:\n",
    "        categories_list = row['categories']\n",
    "    except:\n",
    "        categories_list = row['venue.categories']\n",
    "        \n",
    "    if len(categories_list) == 0:\n",
    "        return None\n",
    "    else:\n",
    "        return categories_list[0]['name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Southbank Promenade</td>\n",
       "      <td>Pedestrian Plaza</td>\n",
       "      <td>-37.819959</td>\n",
       "      <td>144.965467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ponyfish Island</td>\n",
       "      <td>Bar</td>\n",
       "      <td>-37.819918</td>\n",
       "      <td>144.965021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Yarra River</td>\n",
       "      <td>River</td>\n",
       "      <td>-37.819684</td>\n",
       "      <td>144.965115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eureka Skydeck 88</td>\n",
       "      <td>Scenic Lookout</td>\n",
       "      <td>-37.821589</td>\n",
       "      <td>144.964594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Langham</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>-37.820370</td>\n",
       "      <td>144.965710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Soho Melbourne</td>\n",
       "      <td>Italian Restaurant</td>\n",
       "      <td>-37.820609</td>\n",
       "      <td>144.963152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENA greek street food</td>\n",
       "      <td>Greek Restaurant</td>\n",
       "      <td>-37.819897</td>\n",
       "      <td>144.966001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Waterfront Seafood-Bar-Grill</td>\n",
       "      <td>Seafood Restaurant</td>\n",
       "      <td>-37.820029</td>\n",
       "      <td>144.965557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Pure South</td>\n",
       "      <td>Australian Restaurant</td>\n",
       "      <td>-37.820232</td>\n",
       "      <td>144.965259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Broad Bean Organic Grocer</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>-37.822588</td>\n",
       "      <td>144.966912</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           name             categories        lat         lng\n",
       "0           Southbank Promenade       Pedestrian Plaza -37.819959  144.965467\n",
       "1               Ponyfish Island                    Bar -37.819918  144.965021\n",
       "2                   Yarra River                  River -37.819684  144.965115\n",
       "3             Eureka Skydeck 88         Scenic Lookout -37.821589  144.964594\n",
       "4                   The Langham                  Hotel -37.820370  144.965710\n",
       "5                Soho Melbourne     Italian Restaurant -37.820609  144.963152\n",
       "6         ENA greek street food       Greek Restaurant -37.819897  144.966001\n",
       "7  Waterfront Seafood-Bar-Grill     Seafood Restaurant -37.820029  144.965557\n",
       "8                    Pure South  Australian Restaurant -37.820232  144.965259\n",
       "9     Broad Bean Organic Grocer          Grocery Store -37.822588  144.966912"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "venues = results['response']['groups'][0]['items']\n",
    "    \n",
    "SBnearby_venues = json_normalize(venues) # flatten JSON\n",
    "\n",
    "# filter columns\n",
    "filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\n",
    "SBnearby_venues =SBnearby_venues.loc[:, filtered_columns]\n",
    "\n",
    "# filter the category for each row\n",
    "SBnearby_venues['venue.categories'] = SBnearby_venues.apply(get_category_type, axis=1)\n",
    "\n",
    "# clean columns\n",
    "SBnearby_venues.columns = [col.split(\".\")[-1] for col in SBnearby_venues.columns]\n",
    "\n",
    "SBnearby_venues.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Map of Southbank in Melbourne with venues near residence place - for reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7f7789e98940>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create map of Southbank Melbourne using latitude and longitude values\n",
    "map_sb = folium.Map(location=[latitude, longitude], zoom_start=20)\n",
    "\n",
    "# add markers to map\n",
    "for lat, lng, label in zip(SBnearby_venues['lat'], SBnearby_venues['lng'], SBnearby_venues['name']):\n",
    "    label = folium.Popup(label, parse_html=True)\n",
    "    folium.RegularPolygonMarker(\n",
    "        [lat, lng],\n",
    "        number_of_sides=4,\n",
    "        radius=10,\n",
    "        popup=label,\n",
    "        color='blue',\n",
    "        fill_color='#0f0f0f',\n",
    "        fill_opacity=0.7,\n",
    "    ).add_to(map_sb)  \n",
    "    \n",
    "map_sb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.6",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
